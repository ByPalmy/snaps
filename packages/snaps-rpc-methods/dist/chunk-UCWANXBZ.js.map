{"version":3,"sources":["../src/permitted/resolveInterface.ts"],"names":[],"mappings":";AAEA,SAAS,iBAAiB;AAO1B,SAAS,aAAa,QAAQ,QAAQ,cAAc;AAEpD,SAAS,kBAA6B;AAItC,IAAM,YAA4D;AAAA,EAChE,kBAAkB;AACpB;AAUO,IAAM,0BAIT;AAAA,EACF,aAAa,CAAC,uBAAuB;AAAA,EACrC,gBAAgB;AAAA,EAChB;AACF;AAEA,IAAM,mCAAmC,OAAO;AAAA,EAC9C,IAAI,OAAO;AAAA,EACX,OAAO;AACT,CAAC;AAmBD,eAAe,kCACb,KACA,KACA,OACA,KACA,EAAE,iBAAiB,GACJ;AACf,QAAM,EAAE,OAAO,IAAI;AAEnB,MAAI;AACF,UAAM,kBAAkB,mBAAmB,MAAM;AAEjD,UAAM,EAAE,IAAI,MAAM,IAAI;AAEtB,UAAM,iBAAiB,IAAI,KAAK;AAChC,QAAI,SAAS;AAAA,EACf,SAAS,OAAO;AACd,WAAO,IAAI,KAAK;AAAA,EAClB;AAEA,SAAO,IAAI;AACb;AASA,SAAS,mBAAmB,QAA6C;AACvE,MAAI;AACF,WAAO,OAAO,QAAQ,gCAAgC;AAAA,EACxD,SAAS,OAAO;AACd,QAAI,iBAAiB,aAAa;AAChC,YAAM,UAAU,cAAc;AAAA,QAC5B,SAAS,mBAAmB,MAAM,OAAO;AAAA,MAC3C,CAAC;AAAA,IACH;AAEA,UAAM,UAAU,SAAS;AAAA,EAC3B;AACF","sourcesContent":["import type { JsonRpcEngineEndCallback } from '@metamask/json-rpc-engine';\nimport type { PermittedHandlerExport } from '@metamask/permission-controller';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type {\n  JsonRpcRequest,\n  ResolveInterfaceParams,\n  ResolveInterfaceResult,\n} from '@metamask/snaps-sdk';\nimport type { InferMatching } from '@metamask/snaps-utils';\nimport { StructError, create, object, string } from '@metamask/superstruct';\nimport type { PendingJsonRpcResponse } from '@metamask/utils';\nimport { JsonStruct, type Json } from '@metamask/utils';\n\nimport type { MethodHooksObject } from '../utils';\n\nconst hookNames: MethodHooksObject<ResolveInterfaceMethodHooks> = {\n  resolveInterface: true,\n};\n\nexport type ResolveInterfaceMethodHooks = {\n  /**\n   * @param id - The interface id.\n   * @param value - The value to resolve the interface with.\n   */\n  resolveInterface: (id: string, value: Json) => Promise<void>;\n};\n\nexport const resolveInterfaceHandler: PermittedHandlerExport<\n  ResolveInterfaceMethodHooks,\n  ResolveInterfaceParameters,\n  ResolveInterfaceResult\n> = {\n  methodNames: ['snap_resolveInterface'],\n  implementation: getResolveInterfaceImplementation,\n  hookNames,\n};\n\nconst ResolveInterfaceParametersStruct = object({\n  id: string(),\n  value: JsonStruct,\n});\n\nexport type ResolveInterfaceParameters = InferMatching<\n  typeof ResolveInterfaceParametersStruct,\n  ResolveInterfaceParams\n>;\n\n/**\n * The `snap_resolveInterface` method implementation.\n *\n * @param req - The JSON-RPC request object.\n * @param res - The JSON-RPC response object.\n * @param _next - The `json-rpc-engine` \"next\" callback. Not used by this\n * function.\n * @param end - The `json-rpc-engine` \"end\" callback.\n * @param hooks - The RPC method hooks.\n * @param hooks.resolveInterface - The function to resolve the interface.\n * @returns Nothing.\n */\nasync function getResolveInterfaceImplementation(\n  req: JsonRpcRequest<ResolveInterfaceParameters>,\n  res: PendingJsonRpcResponse<ResolveInterfaceResult>,\n  _next: unknown,\n  end: JsonRpcEngineEndCallback,\n  { resolveInterface }: ResolveInterfaceMethodHooks,\n): Promise<void> {\n  const { params } = req;\n\n  try {\n    const validatedParams = getValidatedParams(params);\n\n    const { id, value } = validatedParams;\n\n    await resolveInterface(id, value);\n    res.result = null;\n  } catch (error) {\n    return end(error);\n  }\n\n  return end();\n}\n\n/**\n * Validate the resolveInterface method `params` and returns them cast to the correct\n * type. Throws if validation fails.\n *\n * @param params - The unvalidated params object from the method request.\n * @returns The validated resolveInterface method parameter object.\n */\nfunction getValidatedParams(params: unknown): ResolveInterfaceParameters {\n  try {\n    return create(params, ResolveInterfaceParametersStruct);\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw rpcErrors.invalidParams({\n        message: `Invalid params: ${error.message}.`,\n      });\n    }\n    /* istanbul ignore next */\n    throw rpcErrors.internal();\n  }\n}\n"]}
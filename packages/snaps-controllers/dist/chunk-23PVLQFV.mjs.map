{"version":3,"sources":["../src/interface/SnapInterfaceController.ts"],"sourcesContent":["import type {\n  AcceptRequest,\n  HasApprovalRequest,\n} from '@metamask/approval-controller';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type {\n  MaybeUpdateState,\n  TestOrigin,\n} from '@metamask/phishing-controller';\nimport type {\n  InterfaceState,\n  SnapId,\n  ComponentOrElement,\n  InterfaceContext,\n} from '@metamask/snaps-sdk';\nimport type { JSXElement } from '@metamask/snaps-sdk/jsx';\nimport { getJsonSizeUnsafe, validateJsxLinks } from '@metamask/snaps-utils';\nimport type { Json } from '@metamask/utils';\nimport { assert } from '@metamask/utils';\nimport { nanoid } from 'nanoid';\n\nimport {\n  constructState,\n  getJsxInterface,\n  validateInterfaceContext,\n} from './utils';\n\nconst MAX_UI_CONTENT_SIZE = 10_000_000; // 10 mb\n\nconst controllerName = 'SnapInterfaceController';\n\nexport type CreateInterface = {\n  type: `${typeof controllerName}:createInterface`;\n  handler: SnapInterfaceController['createInterface'];\n};\n\nexport type GetInterface = {\n  type: `${typeof controllerName}:getInterface`;\n  handler: SnapInterfaceController['getInterface'];\n};\n\nexport type UpdateInterface = {\n  type: `${typeof controllerName}:updateInterface`;\n  handler: SnapInterfaceController['updateInterface'];\n};\n\nexport type DeleteInterface = {\n  type: `${typeof controllerName}:deleteInterface`;\n  handler: SnapInterfaceController['deleteInterface'];\n};\n\nexport type UpdateInterfaceState = {\n  type: `${typeof controllerName}:updateInterfaceState`;\n  handler: SnapInterfaceController['updateInterfaceState'];\n};\n\nexport type ResolveInterface = {\n  type: `${typeof controllerName}:resolveInterface`;\n  handler: SnapInterfaceController['resolveInterface'];\n};\n\nexport type SnapInterfaceControllerAllowedActions =\n  | TestOrigin\n  | MaybeUpdateState\n  | HasApprovalRequest\n  | AcceptRequest;\n\nexport type SnapInterfaceControllerActions =\n  | CreateInterface\n  | GetInterface\n  | UpdateInterface\n  | DeleteInterface\n  | UpdateInterfaceState\n  | ResolveInterface;\n\nexport type SnapInterfaceControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  SnapInterfaceControllerActions | SnapInterfaceControllerAllowedActions,\n  never,\n  SnapInterfaceControllerAllowedActions['type'],\n  never\n>;\n\nexport type StoredInterface = {\n  snapId: SnapId;\n  content: JSXElement;\n  state: InterfaceState;\n  context: InterfaceContext | null;\n};\n\nexport type SnapInterfaceControllerState = {\n  interfaces: Record<string, StoredInterface>;\n};\n\nexport type SnapInterfaceControllerArgs = {\n  messenger: SnapInterfaceControllerMessenger;\n  state?: SnapInterfaceControllerState;\n};\n\n/**\n * Use this controller to manage snaps UI interfaces using RPC method hooks.\n */\nexport class SnapInterfaceController extends BaseController<\n  typeof controllerName,\n  SnapInterfaceControllerState,\n  SnapInterfaceControllerMessenger\n> {\n  constructor({ messenger, state }: SnapInterfaceControllerArgs) {\n    super({\n      messenger,\n      metadata: {\n        interfaces: { persist: false, anonymous: false },\n      },\n      name: controllerName,\n      state: { interfaces: {}, ...state },\n    });\n\n    this.#registerMessageHandlers();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system\n   * actions.\n   */\n  #registerMessageHandlers() {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:createInterface`,\n      this.createInterface.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getInterface`,\n      this.getInterface.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateInterface`,\n      this.updateInterface.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:deleteInterface`,\n      this.deleteInterface.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateInterfaceState`,\n      this.updateInterfaceState.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:resolveInterface`,\n      this.resolveInterface.bind(this),\n    );\n  }\n\n  /**\n   * Create an interface in the controller state with the associated data.\n   *\n   * @param snapId - The snap id that created the interface.\n   * @param content - The interface content.\n   * @param context - An optional interface context object.\n   * @returns The newly interface id.\n   */\n  async createInterface(\n    snapId: SnapId,\n    content: ComponentOrElement,\n    context?: InterfaceContext,\n  ) {\n    const element = getJsxInterface(content);\n    await this.#validateContent(element);\n    validateInterfaceContext(context);\n\n    const id = nanoid();\n    const componentState = constructState({}, element);\n\n    this.update((draftState) => {\n      // @ts-expect-error - TS2589: Type instantiation is excessively deep and\n      // possibly infinite.\n      draftState.interfaces[id] = {\n        snapId,\n        content: element,\n        state: componentState,\n        context: context ?? null,\n      };\n    });\n\n    return id;\n  }\n\n  /**\n   * Get the data of a given interface id.\n   *\n   * @param snapId - The snap id requesting the interface data.\n   * @param id - The interface id.\n   * @returns The interface state.\n   */\n  getInterface(snapId: SnapId, id: string) {\n    this.#validateArgs(snapId, id);\n\n    return this.state.interfaces[id];\n  }\n\n  /**\n   * Update the interface with the given content.\n   *\n   * @param snapId - The snap id requesting the update.\n   * @param id - The interface id.\n   * @param content - The new content.\n   */\n  async updateInterface(\n    snapId: SnapId,\n    id: string,\n    content: ComponentOrElement,\n  ) {\n    this.#validateArgs(snapId, id);\n    const element = getJsxInterface(content);\n    await this.#validateContent(element);\n\n    const oldState = this.state.interfaces[id].state;\n    const newState = constructState(oldState, element);\n\n    this.update((draftState) => {\n      draftState.interfaces[id].state = newState;\n      draftState.interfaces[id].content = element;\n    });\n  }\n\n  /**\n   * Delete an interface from state.\n   *\n   * @param id - The interface id.\n   */\n  deleteInterface(id: string) {\n    this.update((draftState) => {\n      delete draftState.interfaces[id];\n    });\n  }\n\n  /**\n   * Update the interface state.\n   *\n   * @param id - The interface id.\n   * @param state - The new state.\n   */\n  updateInterfaceState(id: string, state: InterfaceState) {\n    this.update((draftState) => {\n      draftState.interfaces[id].state = state;\n    });\n  }\n\n  /**\n   * Resolve the promise of a given interface approval request.\n   * The approval needs to have the same ID as the interface.\n   *\n   * @param snapId - The snap id.\n   * @param id - The interface id.\n   * @param value - The value to resolve the promise with.\n   */\n  async resolveInterface(snapId: SnapId, id: string, value: Json) {\n    this.#validateArgs(snapId, id);\n    this.#validateApproval(id);\n\n    await this.#acceptApprovalRequest(id, value);\n\n    this.deleteInterface(id);\n  }\n\n  /**\n   * Utility function to validate the args passed to the other methods.\n   *\n   * @param snapId - The snap id.\n   * @param id - The interface id.\n   */\n  #validateArgs(snapId: SnapId, id: string) {\n    const existingInterface = this.state.interfaces[id];\n\n    assert(\n      existingInterface !== undefined,\n      `Interface with id '${id}' not found.`,\n    );\n    assert(\n      existingInterface.snapId === snapId,\n      `Interface not created by ${snapId}.`,\n    );\n  }\n\n  /**\n   * Utility function to validate that the approval request exists.\n   *\n   * @param id - The interface id.\n   */\n  #validateApproval(id: string) {\n    assert(\n      this.#hasApprovalRequest(id),\n      `Approval request with id '${id}' not found.`,\n    );\n  }\n\n  /**\n   * Trigger a Phishing list update if needed.\n   */\n  async #triggerPhishingListUpdate() {\n    await this.messagingSystem.call('PhishingController:maybeUpdateState');\n  }\n\n  /**\n   * Check an origin against the phishing list.\n   *\n   * @param origin - The origin to check.\n   * @returns True if the origin is on the phishing list, otherwise false.\n   */\n  #checkPhishingList(origin: string) {\n    return this.messagingSystem.call('PhishingController:testOrigin', origin)\n      .result;\n  }\n\n  /**\n   * Check if an approval request exists for a given interface by looking up\n   * if the ApprovalController has a request with the given interface ID.\n   *\n   * @param id - The interface id.\n   * @returns True if an approval request exists, otherwise false.\n   */\n  #hasApprovalRequest(id: string) {\n    return this.messagingSystem.call('ApprovalController:hasRequest', {\n      id,\n    });\n  }\n\n  /**\n   * Accept an approval request for a given interface.\n   *\n   * @param id - The interface id.\n   * @param value - The value to resolve the promise with.\n   */\n  async #acceptApprovalRequest(id: string, value: Json) {\n    await this.messagingSystem.call(\n      'ApprovalController:acceptRequest',\n      id,\n      value,\n    );\n  }\n\n  /**\n   * Utility function to validate the components of an interface.\n   * Throws if something is invalid.\n   *\n   * @param element - The JSX element to verify.\n   */\n  async #validateContent(element: JSXElement) {\n    // We assume the validity of this JSON to be validated by the caller.\n    // E.g., in the RPC method implementation.\n    const size = getJsonSizeUnsafe(element);\n    assert(\n      size <= MAX_UI_CONTENT_SIZE,\n      `A Snap UI may not be larger than ${MAX_UI_CONTENT_SIZE / 1000000} MB.`,\n    );\n\n    await this.#triggerPhishingListUpdate();\n    validateJsxLinks(element, this.#checkPhishingList.bind(this));\n  }\n}\n"],"mappings":"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","names":[]}
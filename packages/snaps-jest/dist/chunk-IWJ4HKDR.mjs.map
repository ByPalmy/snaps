{"version":3,"sources":["../src/internals/simulation/files.ts"],"sourcesContent":["import type { File } from '@metamask/snaps-sdk';\nimport { AuxiliaryFileEncoding } from '@metamask/snaps-sdk';\nimport type { VirtualFile } from '@metamask/snaps-utils';\nimport { encodeAuxiliaryFile, normalizeRelative } from '@metamask/snaps-utils';\nimport { bytesToBase64 } from '@metamask/utils';\nimport { readFile, stat } from 'fs/promises';\nimport mime from 'mime';\nimport { basename, extname, resolve } from 'path';\n\nimport type { FileOptions } from '../../types';\n\n/**\n * Get a statically defined Snap file from an array of files.\n *\n * @param files - The Snap files.\n * @param path - The file path.\n * @param encoding - The requested file encoding.\n * @returns The file in the requested encoding if found, otherwise null.\n */\nexport async function getSnapFile(\n  files: VirtualFile[],\n  path: string,\n  encoding: AuxiliaryFileEncoding = AuxiliaryFileEncoding.Base64,\n) {\n  const normalizedPath = normalizeRelative(path);\n  const base64 = files\n    .find((file) => file.path === normalizedPath)\n    ?.toString('base64');\n\n  if (!base64) {\n    return null;\n  }\n\n  return await encodeAuxiliaryFile(base64, encoding);\n}\n\n/**\n * Get the content type of a file based on its extension.\n *\n * @param extension - The file extension.\n * @returns The content type of the file. If the content type cannot be inferred\n * from the extension, `application/octet-stream` is returned.\n */\nexport function getContentType(extension: string) {\n  return mime.getType(extension) ?? 'application/octet-stream';\n}\n\n/**\n * Get the size of a file, from a file path or a `Uint8Array`.\n *\n * @param file - The file to get the size of. This can be a path to a file or a\n * `Uint8Array` containing the file contents. If this is a path, the file is\n * resolved relative to the current working directory.\n * @returns The size of the file in bytes.\n */\nexport async function getFileSize(file: string | Uint8Array) {\n  if (typeof file === 'string') {\n    const { size } = await stat(resolve(process.cwd(), file));\n    return size;\n  }\n\n  return file.length;\n}\n\n/**\n * Get a file object to upload, from a file path or a `Uint8Array`, with an\n * optional file name and content type.\n *\n * @param file - The file to upload. This can be a path to a file or a\n * `Uint8Array` containing the file contents. If this is a path, the file is\n * resolved relative to the current working directory.\n * @param options - The file options.\n * @param options.fileName - The name of the file. By default, this is\n * inferred from the file path if it's a path, and defaults to an empty string\n * if it's a `Uint8Array`.\n * @param options.contentType - The content type of the file. By default, this\n * is inferred from the file name if it's a path, and defaults to\n * `application/octet-stream` if it's a `Uint8Array` or the content type\n * cannot be inferred from the file name.\n */\nexport async function getFileToUpload(\n  file: string | Uint8Array,\n  { fileName, contentType }: FileOptions = {},\n): Promise<File> {\n  if (typeof file === 'string') {\n    const buffer = await readFile(resolve(process.cwd(), file));\n\n    return {\n      name: fileName ?? basename(file),\n      size: buffer.byteLength,\n      contentType: contentType ?? getContentType(extname(file)),\n      contents: bytesToBase64(buffer),\n    };\n  }\n\n  return {\n    name: fileName ?? '',\n    size: file.length,\n    contentType: contentType ?? 'application/octet-stream',\n    contents: bytesToBase64(file),\n  };\n}\n"],"mappings":";AACA,SAAS,6BAA6B;AAEtC,SAAS,qBAAqB,yBAAyB;AACvD,SAAS,qBAAqB;AAC9B,SAAS,UAAU,YAAY;AAC/B,OAAO,UAAU;AACjB,SAAS,UAAU,SAAS,eAAe;AAY3C,eAAsB,YACpB,OACA,MACA,WAAkC,sBAAsB,QACxD;AACA,QAAM,iBAAiB,kBAAkB,IAAI;AAC7C,QAAM,SAAS,MACZ,KAAK,CAAC,SAAS,KAAK,SAAS,cAAc,GAC1C,SAAS,QAAQ;AAErB,MAAI,CAAC,QAAQ;AACX,WAAO;AAAA,EACT;AAEA,SAAO,MAAM,oBAAoB,QAAQ,QAAQ;AACnD;AASO,SAAS,eAAe,WAAmB;AAChD,SAAO,KAAK,QAAQ,SAAS,KAAK;AACpC;AAUA,eAAsB,YAAY,MAA2B;AAC3D,MAAI,OAAO,SAAS,UAAU;AAC5B,UAAM,EAAE,KAAK,IAAI,MAAM,KAAK,QAAQ,QAAQ,IAAI,GAAG,IAAI,CAAC;AACxD,WAAO;AAAA,EACT;AAEA,SAAO,KAAK;AACd;AAkBA,eAAsB,gBACpB,MACA,EAAE,UAAU,YAAY,IAAiB,CAAC,GAC3B;AACf,MAAI,OAAO,SAAS,UAAU;AAC5B,UAAM,SAAS,MAAM,SAAS,QAAQ,QAAQ,IAAI,GAAG,IAAI,CAAC;AAE1D,WAAO;AAAA,MACL,MAAM,YAAY,SAAS,IAAI;AAAA,MAC/B,MAAM,OAAO;AAAA,MACb,aAAa,eAAe,eAAe,QAAQ,IAAI,CAAC;AAAA,MACxD,UAAU,cAAc,MAAM;AAAA,IAChC;AAAA,EACF;AAEA,SAAO;AAAA,IACL,MAAM,YAAY;AAAA,IAClB,MAAM,KAAK;AAAA,IACX,aAAa,eAAe;AAAA,IAC5B,UAAU,cAAc,IAAI;AAAA,EAC9B;AACF;","names":[]}
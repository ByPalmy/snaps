{"version":3,"sources":["../src/cmds/init/initUtils.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAiB;AAC1B,SAAS,YAAY,UAAU;AAC/B,OAAO,eAAe;AAEf,IAAM,mBACX;AAEK,IAAM,gBAAgB;AAO7B,eAAsB,wBACpB,WACe;AACf,MAAI;AACF,UAAM,qBAAqB,cAAc,QAAQ,IAAI;AAErD,QAAI,CAAC,oBAAoB;AACvB,UAAI;AACF,cAAM,GAAG,MAAM,WAAW,EAAE,WAAW,KAAK,CAAC;AAAA,MAC/C,SAAS,OAAO;AACd,cAAM,IAAI,MAAM,6CAA6C;AAAA,MAC/D;AAAA,IACF;AAEA,UAAM,gBAAgB,MAAM,GAAG,QAAQ,SAAS;AAEhD,QAAI,cAAc,SAAS,GAAG;AAC5B,YAAM,IAAI,MAAM,aAAa,SAAS,aAAa;AAAA,IACrD;AAAA,EACF,SAAS,OAAO;AACd,UAAM,IAAI;AAAA,MACR,iEAAiE,MAAM,OAAO;AAAA,IAChF;AAAA,EACF;AACF;AAOO,SAAS,cAAc,WAAmB;AAC/C,QAAM,SAAS;AAAA,IACb;AAAA,IACA,CAAC,SAAS,aAAa,kBAAkB,SAAS;AAAA,IAClD;AAAA,MACE,OAAO,CAAC,CAAC;AAAA,IACX;AAAA,EACF;AAEA,MAAI,OAAO,SAAS,OAAO,WAAW,GAAG;AACvC,UAAM,IAAI,MAAM,2CAA2C;AAAA,EAC7D;AACF;AAOO,SAAS,iBAAiB;AAC/B,QAAM,SAAS,UAAU,OAAO,CAAC,WAAW,GAAG,EAAE,OAAO,SAAS,CAAC;AAClE,SAAO,OAAO,WAAW;AAC3B;AAQO,SAAS,kBAAkB,WAAmB;AACnD,QAAM,SAAS,UAAU,OAAO,CAAC,aAAa,uBAAuB,GAAG;AAAA,IACtE,OAAO;AAAA,IACP,KAAK,UAAU,QAAQ,WAAW,SAAS;AAAA,EAC7C,CAAC;AAED,SAAO,OAAO,WAAW;AAC3B;AAOO,SAAS,kBAAkB,WAAmB;AACnD,QAAM,WAAW;AAAA,IACf;AAAA,MACE,KAAK;AAAA,MACL,QAAQ,CAAC,MAAM;AAAA,IACjB;AAAA,IACA;AAAA,MACE,KAAK;AAAA,MACL,QAAQ,CAAC,OAAO,GAAG;AAAA,IACrB;AAAA,IACA;AAAA,MACE,KAAK;AAAA,MACL,QAAQ,CAAC,UAAU,MAAM,2CAA2C;AAAA,IACtE;AAAA,EACF;AAEA,aAAW,WAAW,UAAU;AAC9B,UAAM,SAAS,UAAU,QAAQ,KAAK,QAAQ,QAAQ;AAAA,MACpD,OAAO;AAAA,MACP,KAAK,UAAU,QAAQ,WAAW,SAAS;AAAA,IAC7C,CAAC;AAED,QAAI,OAAO,SAAS,OAAO,WAAW,GAAG;AACvC,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAAA,EACF;AACF;AAOO,SAAS,YAAY,WAAmB;AAC7C,QAAM,SAAS,UAAU,QAAQ,CAAC,SAAS,GAAG;AAAA,IAC5C,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,IACf,KAAK;AAAA,EACP,CAAC;AAED,MAAI,OAAO,SAAS,OAAO,WAAW,GAAG;AACvC,UAAM,IAAI,MAAM,6CAA6C;AAAA,EAC/D;AACF;AAOO,SAAS,UAAU,eAAuB;AAC/C,QAAM,SAAS,UAAU,QAAQ,CAAC,OAAO,GAAG;AAAA,IAC1C,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,IACf,KAAK,UAAU,QAAQ,WAAW,aAAa;AAAA,EACjD,CAAC;AAED,MAAI,OAAO,SAAS,OAAO,WAAW,GAAG;AACvC,UAAM,IAAI,MAAM,mCAAmC;AAAA,EACrD;AACF","sourcesContent":["import { spawnSync } from 'child_process';\nimport { promises as fs } from 'fs';\nimport pathUtils from 'path';\n\nexport const TEMPLATE_GIT_URL =\n  'https://github.com/MetaMask/template-snap-monorepo.git';\n\nexport const SNAP_LOCATION = 'packages/snap/';\n\n/**\n * Checks if the destination folder exists and if it's empty. Otherwise create it.\n *\n * @param directory - The destination folder.\n */\nexport async function prepareWorkingDirectory(\n  directory: string,\n): Promise<void> {\n  try {\n    const isCurrentDirectory = directory === process.cwd();\n\n    if (!isCurrentDirectory) {\n      try {\n        await fs.mkdir(directory, { recursive: true });\n      } catch (error) {\n        throw new Error('Init Error: Failed to create new directory.');\n      }\n    }\n\n    const existingFiles = await fs.readdir(directory);\n\n    if (existingFiles.length > 0) {\n      throw new Error(`Directory ${directory} not empty.`);\n    }\n  } catch (error) {\n    throw new Error(\n      `Init Error: Failed to prepare working directory with message: ${error.message}`,\n    );\n  }\n}\n\n/**\n * Clones the template in a directory.\n *\n * @param directory - The directory to clone the template in.\n */\nexport function cloneTemplate(directory: string) {\n  const result = spawnSync(\n    'git',\n    ['clone', '--depth=1', TEMPLATE_GIT_URL, directory],\n    {\n      stdio: [2],\n    },\n  );\n\n  if (result.error || result.status !== 0) {\n    throw new Error('Init Error: Failed to clone the template.');\n  }\n}\n\n/**\n * Check if git is installed.\n *\n * @returns True if git is installed, or false otherwise.\n */\nexport function isGitInstalled() {\n  const result = spawnSync('git', ['--version'], { stdio: 'ignore' });\n  return result.status === 0;\n}\n\n/**\n * Check if the actual working dir is a git repository.\n *\n * @param directory - The directory to check.\n * @returns True if it's a git repository otherwise false.\n */\nexport function isInGitRepository(directory: string) {\n  const result = spawnSync('git', ['rev-parse', '--is-inside-work-tree'], {\n    stdio: 'ignore',\n    cwd: pathUtils.resolve(__dirname, directory),\n  });\n\n  return result.status === 0;\n}\n\n/**\n * Init a git repository and make the first commit.\n *\n * @param directory - The directory to init.\n */\nexport function gitInitWithCommit(directory: string) {\n  const commands = [\n    {\n      cmd: 'git',\n      params: ['init'],\n    },\n    {\n      cmd: 'git',\n      params: ['add', '.'],\n    },\n    {\n      cmd: 'git',\n      params: ['commit', '-m', 'Initial commit from @metamask/create-snap'],\n    },\n  ];\n\n  for (const command of commands) {\n    const result = spawnSync(command.cmd, command.params, {\n      stdio: 'ignore',\n      cwd: pathUtils.resolve(__dirname, directory),\n    });\n\n    if (result.error || result.status !== 0) {\n      throw new Error('Init Error: Failed to init a new git repository.');\n    }\n  }\n}\n\n/**\n * Install dependencies in a yarn project.\n *\n * @param directory - The directory containing the project.\n */\nexport function yarnInstall(directory: string) {\n  const result = spawnSync('yarn', ['install'], {\n    stdio: [0, 1, 2],\n    cwd: directory,\n  });\n\n  if (result.error || result.status !== 0) {\n    throw new Error('Init Error: Failed to install dependencies.');\n  }\n}\n\n/**\n * Build the snap project.\n *\n * @param snapDirectory - The directory containing the snap.\n */\nexport function buildSnap(snapDirectory: string) {\n  const result = spawnSync('yarn', ['build'], {\n    stdio: [0, 1, 2],\n    cwd: pathUtils.resolve(__dirname, snapDirectory),\n  });\n\n  if (result.error || result.status !== 0) {\n    throw new Error('Init Error: Failed to build snap.');\n  }\n}\n"]}
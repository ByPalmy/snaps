{"version":3,"sources":["../src/svg.ts"],"names":[],"mappings":";AAAA,SAAS,QAAQ,aAAa,gBAAgB;AAC9C,SAAS,iBAAiB;AAQnB,SAAS,SAAS,KAAa;AACpC,MAAI;AACF,UAAM,UAAU,IAAI,KAAK;AAEzB,WAAO,QAAQ,SAAS,CAAC;AAEzB,UAAM,SAAS,IAAI,UAAU;AAAA,MAC3B,kBAAkB;AAAA,MAClB,qBAAqB;AAAA,IACvB,CAAC;AACD,UAAM,SAAS,OAAO,MAAM,SAAS,IAAI;AAEzC,WAAO,YAAY,QAAQ,KAAK,CAAC;AAGjC,QAAI,CAAC,SAAS,OAAO,GAAG,GAAG;AACzB,aAAO,CAAC;AAAA,IACV;AAEA,WAAO,OAAO;AAAA,EAChB,QAAQ;AACN,UAAM,IAAI,MAAM,gCAAgC;AAAA,EAClD;AACF;AAQO,SAAS,MAAM,KAAa;AACjC,MAAI;AACF,aAAS,GAAG;AACZ,WAAO;AAAA,EACT,QAAQ;AACN,WAAO;AAAA,EACT;AACF","sourcesContent":["import { assert, hasProperty, isObject } from '@metamask/utils';\nimport { XMLParser } from 'fast-xml-parser';\n\n/**\n * Parse and validate a string as an SVG.\n *\n * @param svg - An SVG string.\n * @returns The SVG, its attributes and children in an object format.\n */\nexport function parseSvg(svg: string) {\n  try {\n    const trimmed = svg.trim();\n\n    assert(trimmed.length > 0);\n\n    const parser = new XMLParser({\n      ignoreAttributes: false,\n      parseAttributeValue: true,\n    });\n    const parsed = parser.parse(trimmed, true);\n\n    assert(hasProperty(parsed, 'svg'));\n\n    // Empty SVGs are not returned as objects\n    if (!isObject(parsed.svg)) {\n      return {};\n    }\n\n    return parsed.svg;\n  } catch {\n    throw new Error('Snap icon must be a valid SVG.');\n  }\n}\n\n/**\n * Validate that a string is a valid SVG.\n *\n * @param svg - An SVG string.\n * @returns True if the SVG is valid otherwise false.\n */\nexport function isSvg(svg: string) {\n  try {\n    parseSvg(svg);\n    return true;\n  } catch {\n    return false;\n  }\n}\n"]}